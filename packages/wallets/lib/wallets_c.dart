// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

class CWallets {
  /// Holds the Dynamic library.
  final ffi.DynamicLibrary _dylib;

  /// The symbols are looked up in [dynamicLibrary].
  CWallets(ffi.DynamicLibrary dynamicLibrary) : _dylib = dynamicLibrary;

  void CError_free(
    ffi.Pointer<CError> error,
  ) {
    _CError_free ??=
        _dylib.lookupFunction<_c_CError_free, _dart_CError_free>('CError_free');
    return _CError_free(
      error,
    );
  }

  _dart_CError_free _CError_free;

  int Wallets_lockRead() {
    _Wallets_lockRead ??=
        _dylib.lookupFunction<_c_Wallets_lockRead, _dart_Wallets_lockRead>(
            'Wallets_lockRead');
    return _Wallets_lockRead();
  }

  _dart_Wallets_lockRead _Wallets_lockRead;

  int Wallets_unlockRead() {
    _Wallets_unlockRead ??=
        _dylib.lookupFunction<_c_Wallets_unlockRead, _dart_Wallets_unlockRead>(
            'Wallets_unlockRead');
    return _Wallets_unlockRead();
  }

  _dart_Wallets_unlockRead _Wallets_unlockRead;

  int Wallets_lockWrite() {
    _Wallets_lockWrite ??=
        _dylib.lookupFunction<_c_Wallets_lockWrite, _dart_Wallets_lockWrite>(
            'Wallets_lockWrite');
    return _Wallets_lockWrite();
  }

  _dart_Wallets_lockWrite _Wallets_lockWrite;

  int Wallets_unlockWrite() {
    _Wallets_unlockWrite ??= _dylib.lookupFunction<_c_Wallets_unlockWrite,
        _dart_Wallets_unlockWrite>('Wallets_unlockWrite');
    return _Wallets_unlockWrite();
  }

  _dart_Wallets_unlockWrite _Wallets_unlockWrite;

  ffi.Pointer<CError> Wallets_init(
    ffi.Pointer<InitParameters> params,
  ) {
    _Wallets_init ??= _dylib
        .lookupFunction<_c_Wallets_init, _dart_Wallets_init>('Wallets_init');
    return _Wallets_init(
      params,
    );
  }

  _dart_Wallets_init _Wallets_init;

  ffi.Pointer<CError> Wallets_uninit(
    ffi.Pointer<UnInitParameters> params,
  ) {
    _Wallets_uninit ??=
        _dylib.lookupFunction<_c_Wallets_uninit, _dart_Wallets_uninit>(
            'Wallets_uninit');
    return _Wallets_uninit(
      params,
    );
  }

  _dart_Wallets_uninit _Wallets_uninit;
}

class CError extends ffi.Struct {
  @ffi.Uint64()
  int code;

  ffi.Pointer<ffi.Int8> message;
}

class EthChain extends ffi.Struct {}

class EeeChain extends ffi.Struct {}

class BtcChain extends ffi.Struct {}

class Wallet extends ffi.Struct {
  ffi.Pointer<ffi.Int8> id;

  ffi.Pointer<ffi.Int8> nextId;

  ffi.Pointer<EthChain> ethChains;

  ffi.Pointer<EeeChain> eeeChains;

  ffi.Pointer<BtcChain> btcChains;
}

class Address extends ffi.Struct {
  ffi.Pointer<ffi.Int8> id;

  ffi.Pointer<ffi.Int8> walletId;

  ffi.Pointer<ffi.Int8> chainType;

  ffi.Pointer<ffi.Int8> address;

  ffi.Pointer<ffi.Int8> publicKey;
}

class TokenShared extends ffi.Struct {
  ffi.Pointer<ffi.Int8> id;

  ffi.Pointer<ffi.Int8> nextId;

  ffi.Pointer<ffi.Int8> name;

  ffi.Pointer<ffi.Int8> symbol;
}

class ChainShared extends ffi.Struct {
  ffi.Pointer<ffi.Int8> id;

  ffi.Pointer<ffi.Int8> walletId;

  ffi.Pointer<ffi.Int8> chainType;

  /// /// 钱包地址
  ffi.Pointer<Address> walletAddress;
}

class BtcChainToken extends ffi.Struct {
  ffi.Pointer<TokenShared> tokenShared;
}

class EeeChainToken extends ffi.Struct {
  ffi.Pointer<TokenShared> tokenShared;
}

class EthChainToken extends ffi.Struct {
  ffi.Pointer<TokenShared> tokenShared;
}

class EthChainTokenDefault extends ffi.Struct {
  ffi.Pointer<TokenShared> tokenShared;
}

class EthChainTokenAuth extends ffi.Struct {
  ffi.Pointer<TokenShared> tokenShared;
}

class InitParameters extends ffi.Struct {}

class UnInitParameters extends ffi.Struct {}

typedef _c_CError_free = ffi.Void Function(
  ffi.Pointer<CError> error,
);

typedef _dart_CError_free = void Function(
  ffi.Pointer<CError> error,
);

typedef _c_Wallets_lockRead = ffi.Uint16 Function();

typedef _dart_Wallets_lockRead = int Function();

typedef _c_Wallets_unlockRead = ffi.Uint16 Function();

typedef _dart_Wallets_unlockRead = int Function();

typedef _c_Wallets_lockWrite = ffi.Uint16 Function();

typedef _dart_Wallets_lockWrite = int Function();

typedef _c_Wallets_unlockWrite = ffi.Uint16 Function();

typedef _dart_Wallets_unlockWrite = int Function();

typedef _c_Wallets_init = ffi.Pointer<CError> Function(
  ffi.Pointer<InitParameters> params,
);

typedef _dart_Wallets_init = ffi.Pointer<CError> Function(
  ffi.Pointer<InitParameters> params,
);

typedef _c_Wallets_uninit = ffi.Pointer<CError> Function(
  ffi.Pointer<UnInitParameters> params,
);

typedef _dart_Wallets_uninit = ffi.Pointer<CError> Function(
  ffi.Pointer<UnInitParameters> params,
);
