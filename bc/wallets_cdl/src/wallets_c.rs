/* automatically generated by rust-bindgen 0.55.1 */

#![allow(non_upper_case_globals)]#![allow(non_camel_case_types)]#![allow(non_snake_case)]#![allow(dead_code)]

pub type CBool = ::std::os::raw::c_ushort;
pub const CFalse: CBool = 0;
pub const CTrue: CBool = 1;
pub type CU64 = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CError {
    pub code: CU64,
    pub message: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_CError() {
    assert_eq!(
        ::std::mem::size_of::<CError>(),
        16usize,
        concat!("Size of: ", stringify!(CError))
    );
    assert_eq!(
        ::std::mem::align_of::<CError>(),
        8usize,
        concat!("Alignment of ", stringify!(CError))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CError>())).code as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CError),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CError>())).message as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CError),
            "::",
            stringify!(message)
        )
    );
}
pub const Success: CU64 = 0;
extern "C" {
    pub fn CError_free(error: *mut CError);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Wallet {
    pub id: *mut ::std::os::raw::c_char,
    pub nextId: *mut ::std::os::raw::c_char,
    pub ethChains: *mut EthChain,
    pub eeeChains: *mut EeeChain,
    pub btcChains: *mut BtcChain,
}
#[test]
fn bindgen_test_layout_Wallet() {
    assert_eq!(
        ::std::mem::size_of::<Wallet>(),
        40usize,
        concat!("Size of: ", stringify!(Wallet))
    );
    assert_eq!(
        ::std::mem::align_of::<Wallet>(),
        8usize,
        concat!("Alignment of ", stringify!(Wallet))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Wallet>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Wallet),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Wallet>())).nextId as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Wallet),
            "::",
            stringify!(nextId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Wallet>())).ethChains as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Wallet),
            "::",
            stringify!(ethChains)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Wallet>())).eeeChains as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Wallet),
            "::",
            stringify!(eeeChains)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Wallet>())).btcChains as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Wallet),
            "::",
            stringify!(btcChains)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Address {
    pub id: *mut ::std::os::raw::c_char,
    pub walletId: *mut ::std::os::raw::c_char,
    pub chainType: *mut ::std::os::raw::c_char,
    pub address: *mut ::std::os::raw::c_char,
    pub publicKey: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_Address() {
    assert_eq!(
        ::std::mem::size_of::<Address>(),
        40usize,
        concat!("Size of: ", stringify!(Address))
    );
    assert_eq!(
        ::std::mem::align_of::<Address>(),
        8usize,
        concat!("Alignment of ", stringify!(Address))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Address>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Address),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Address>())).walletId as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Address),
            "::",
            stringify!(walletId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Address>())).chainType as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Address),
            "::",
            stringify!(chainType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Address>())).address as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Address),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Address>())).publicKey as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Address),
            "::",
            stringify!(publicKey)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TokenShared {
    pub id: *mut ::std::os::raw::c_char,
    pub nextId: *mut ::std::os::raw::c_char,
    pub name: *mut ::std::os::raw::c_char,
    pub symbol: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_TokenShared() {
    assert_eq!(
        ::std::mem::size_of::<TokenShared>(),
        32usize,
        concat!("Size of: ", stringify!(TokenShared))
    );
    assert_eq!(
        ::std::mem::align_of::<TokenShared>(),
        8usize,
        concat!("Alignment of ", stringify!(TokenShared))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TokenShared>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TokenShared),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TokenShared>())).nextId as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TokenShared),
            "::",
            stringify!(nextId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TokenShared>())).name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TokenShared),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TokenShared>())).symbol as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TokenShared),
            "::",
            stringify!(symbol)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ChainShared {
    pub id: *mut ::std::os::raw::c_char,
    pub walletId: *mut ::std::os::raw::c_char,
    pub chainType: *mut ::std::os::raw::c_char,
    #[doc = " 钱包地址"]
    pub walletAddress: *mut Address,
}
#[test]
fn bindgen_test_layout_ChainShared() {
    assert_eq!(
        ::std::mem::size_of::<ChainShared>(),
        32usize,
        concat!("Size of: ", stringify!(ChainShared))
    );
    assert_eq!(
        ::std::mem::align_of::<ChainShared>(),
        8usize,
        concat!("Alignment of ", stringify!(ChainShared))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ChainShared>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ChainShared),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ChainShared>())).walletId as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ChainShared),
            "::",
            stringify!(walletId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ChainShared>())).chainType as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ChainShared),
            "::",
            stringify!(chainType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ChainShared>())).walletAddress as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ChainShared),
            "::",
            stringify!(walletAddress)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BtcChainToken {
    pub tokenShared: *mut TokenShared,
}
#[test]
fn bindgen_test_layout_BtcChainToken() {
    assert_eq!(
        ::std::mem::size_of::<BtcChainToken>(),
        8usize,
        concat!("Size of: ", stringify!(BtcChainToken))
    );
    assert_eq!(
        ::std::mem::align_of::<BtcChainToken>(),
        8usize,
        concat!("Alignment of ", stringify!(BtcChainToken))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BtcChainToken>())).tokenShared as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BtcChainToken),
            "::",
            stringify!(tokenShared)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BtcChain {
    pub chainShared: *mut ChainShared,
    pub tokens: *mut BtcChainToken,
    pub tokensLength: CU64,
}
#[test]
fn bindgen_test_layout_BtcChain() {
    assert_eq!(
        ::std::mem::size_of::<BtcChain>(),
        24usize,
        concat!("Size of: ", stringify!(BtcChain))
    );
    assert_eq!(
        ::std::mem::align_of::<BtcChain>(),
        8usize,
        concat!("Alignment of ", stringify!(BtcChain))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BtcChain>())).chainShared as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BtcChain),
            "::",
            stringify!(chainShared)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BtcChain>())).tokens as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BtcChain),
            "::",
            stringify!(tokens)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BtcChain>())).tokensLength as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BtcChain),
            "::",
            stringify!(tokensLength)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EeeChainToken {
    pub tokenShared: *mut TokenShared,
}
#[test]
fn bindgen_test_layout_EeeChainToken() {
    assert_eq!(
        ::std::mem::size_of::<EeeChainToken>(),
        8usize,
        concat!("Size of: ", stringify!(EeeChainToken))
    );
    assert_eq!(
        ::std::mem::align_of::<EeeChainToken>(),
        8usize,
        concat!("Alignment of ", stringify!(EeeChainToken))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EeeChainToken>())).tokenShared as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EeeChainToken),
            "::",
            stringify!(tokenShared)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EeeChain {
    pub chainShared: *mut ChainShared,
    pub address: *mut Address,
    pub tokens: *mut EeeChainToken,
    pub tokensLength: CU64,
}
#[test]
fn bindgen_test_layout_EeeChain() {
    assert_eq!(
        ::std::mem::size_of::<EeeChain>(),
        32usize,
        concat!("Size of: ", stringify!(EeeChain))
    );
    assert_eq!(
        ::std::mem::align_of::<EeeChain>(),
        8usize,
        concat!("Alignment of ", stringify!(EeeChain))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EeeChain>())).chainShared as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EeeChain),
            "::",
            stringify!(chainShared)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EeeChain>())).address as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(EeeChain),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EeeChain>())).tokens as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(EeeChain),
            "::",
            stringify!(tokens)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EeeChain>())).tokensLength as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(EeeChain),
            "::",
            stringify!(tokensLength)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EthChainToken {
    pub tokenShared: *mut TokenShared,
}
#[test]
fn bindgen_test_layout_EthChainToken() {
    assert_eq!(
        ::std::mem::size_of::<EthChainToken>(),
        8usize,
        concat!("Size of: ", stringify!(EthChainToken))
    );
    assert_eq!(
        ::std::mem::align_of::<EthChainToken>(),
        8usize,
        concat!("Alignment of ", stringify!(EthChainToken))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EthChainToken>())).tokenShared as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EthChainToken),
            "::",
            stringify!(tokenShared)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EthChainTokenDefault {
    pub tokenShared: *mut TokenShared,
}
#[test]
fn bindgen_test_layout_EthChainTokenDefault() {
    assert_eq!(
        ::std::mem::size_of::<EthChainTokenDefault>(),
        8usize,
        concat!("Size of: ", stringify!(EthChainTokenDefault))
    );
    assert_eq!(
        ::std::mem::align_of::<EthChainTokenDefault>(),
        8usize,
        concat!("Alignment of ", stringify!(EthChainTokenDefault))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<EthChainTokenDefault>())).tokenShared as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EthChainTokenDefault),
            "::",
            stringify!(tokenShared)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EthChainTokenAuth {
    pub tokenShared: *mut TokenShared,
}
#[test]
fn bindgen_test_layout_EthChainTokenAuth() {
    assert_eq!(
        ::std::mem::size_of::<EthChainTokenAuth>(),
        8usize,
        concat!("Size of: ", stringify!(EthChainTokenAuth))
    );
    assert_eq!(
        ::std::mem::align_of::<EthChainTokenAuth>(),
        8usize,
        concat!("Alignment of ", stringify!(EthChainTokenAuth))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EthChainTokenAuth>())).tokenShared as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EthChainTokenAuth),
            "::",
            stringify!(tokenShared)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EthChain {
    pub chain_shared: *mut ChainShared,
    pub tokens: *mut EthChainToken,
    pub tokens_length: CU64,
}
#[test]
fn bindgen_test_layout_EthChain() {
    assert_eq!(
        ::std::mem::size_of::<EthChain>(),
        24usize,
        concat!("Size of: ", stringify!(EthChain))
    );
    assert_eq!(
        ::std::mem::align_of::<EthChain>(),
        8usize,
        concat!("Alignment of ", stringify!(EthChain))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EthChain>())).chain_shared as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EthChain),
            "::",
            stringify!(chain_shared)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EthChain>())).tokens as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(EthChain),
            "::",
            stringify!(tokens)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EthChain>())).tokens_length as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(EthChain),
            "::",
            stringify!(tokens_length)
        )
    );
}
extern "C" {
    pub fn Wallets_lockRead() -> CBool;
}
extern "C" {
    pub fn Wallets_unlockRead() -> CBool;
}
extern "C" {
    pub fn Wallets_lockWrite() -> CBool;
}
extern "C" {
    pub fn Wallets_unlockWrite() -> CBool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct InitParameters {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_InitParameters() {
    assert_eq!(
        ::std::mem::size_of::<InitParameters>(),
        4usize,
        concat!("Size of: ", stringify!(InitParameters))
    );
    assert_eq!(
        ::std::mem::align_of::<InitParameters>(),
        1usize,
        concat!("Alignment of ", stringify!(InitParameters))
    );
}
extern "C" {
    pub fn Wallets_init(params: *const InitParameters) -> *const CError;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UnInitParameters {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_UnInitParameters() {
    assert_eq!(
        ::std::mem::size_of::<UnInitParameters>(),
        4usize,
        concat!("Size of: ", stringify!(UnInitParameters))
    );
    assert_eq!(
        ::std::mem::align_of::<UnInitParameters>(),
        1usize,
        concat!("Alignment of ", stringify!(UnInitParameters))
    );
}
extern "C" {
    pub fn Wallets_uninit(params: *const UnInitParameters) -> *const CError;
}
